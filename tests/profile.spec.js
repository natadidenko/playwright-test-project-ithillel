import { test, expect } from '@playwright/test';

test('Mock user profile response', async ({ page }) => {
    // –õ–æ–≥—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    page.on('request', request => console.log(`‚û°Ô∏è [REQUEST] ${request.method()} ${request.url()}`));
    page.on('response', async response => {
        console.log(`‚úÖ [RESPONSE] ${response.status()} ${response.url()}`);
        if (response.url().includes('/api/users/profile')) {
            console.log('üîé [API RESPONSE] –û—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', await response.json());
        }
    });

    // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    await page.goto('https://qauto.forstudy.space/');

    // –ù–∞—Ç–∏—Å–∫–∞—î–º–æ "Sign In"
    await page.click('button.header_signin');

    // –í–≤–æ–¥–∏–º–æ email —Ç–∞ –ø–∞—Ä–æ–ª—å
    await page.fill('#signinEmail', 'email3@domain.com');
    await page.fill('#signinPassword', 'Qa123456!');

    // –ù–∞—Ç–∏—Å–∫–∞—î–º–æ "Login"
    await page.click('button.btn-primary:has-text("Login")');

    // –ß–µ–∫–∞—î–º–æ —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≥–∞—Ä–∞–∂–∞
    await page.waitForURL('https://qauto.forstudy.space/panel/garage');

    // –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ API /api/users/profile –ø–µ—Ä–µ–¥ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º "Profile"
    await page.route('**/api/users/profile', async route => {
        console.log('‚ö° [MOCK] –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ /api/users/profile');
        await route.fulfill({
            status: 200,
            contentType: 'application/json',
            body: JSON.stringify({
                status: "ok",
                data: {
                    userId: 123,
                    photoFilename: "default-user.png",
                    name: "Nataliia",
                    lastName: "Doe",
                    country: "Ukraine",
                    dateBirth: "1995-05-15"
                }
            })
        });
    });

    // –ù–∞—Ç–∏—Å–∫–∞—î–º–æ "Profile"
    const profileButton = page.locator('a.btn-sidebar.-profile');
    await expect(profileButton).toBeVisible();
    await profileButton.click();

    // –ß–µ–∫–∞—î–º–æ —Ä–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–æ—Ñ—ñ–ª—é
    await page.waitForURL('https://qauto.forstudy.space/panel/profile');

    try {
        // –ß–µ–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å API /api/users/profile –∑ —Ç–∞–π–º-–∞—É—Ç–æ–º 60 —Å–µ–∫—É–Ω–¥
        const profileResponse = await page.waitForResponse(response =>
            response.url().includes('/api/users/profile') && response.status() === 200,
            { timeout: 60000 } // 60 —Å–µ–∫—É–Ω–¥
        );
        console.log('‚úÖ API profile response received:', await profileResponse.json());
    } catch (e) {
        console.error('Response not received in time', e);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–∞–∫—Ä–∏—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
    if (page.isClosed()) {
        console.error('–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–∫—Ä–∏—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º!');
        return;
    }

    // –û—á—ñ–∫—É—î–º–æ –∫—ñ–ª—å–∫–∞ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥, —â–æ–± –∑–º—ñ–Ω–∏ –∑ API –≤—ñ–¥–æ–±—Ä–∞–∑–∏–ª–∏—Å—å
    await page.waitForTimeout(1000); // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É

    // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI...');
    await page.goto('https://qauto.forstudy.space/panel/profile'); // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞–º—ñ—Å—Ç—å reload
    await page.waitForLoadState('networkidle'); // –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —â–æ –µ–ª–µ–º–µ–Ω—Ç –¥—ñ–π—Å–Ω–æ —ñ—Å–Ω—É—î
    const profileNameLocator = page.locator('.profile_name'); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –ª–æ–∫–∞—Ç–æ—Ä–∞

    // –û—á—ñ–∫—É—î–º–æ –ø–æ—è–≤—É —ñ–º–µ–Ω—ñ –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ
    console.log('üîç –û—á—ñ–∫—É—î–º–æ –ø–æ—è–≤—É —ñ–º–µ–Ω—ñ...');
    await profileNameLocator.waitFor({ state: 'visible', timeout: 400000 }); // –û—á—ñ–∫—É—î–º–æ, –ø–æ–∫–∏ –µ–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–Ω–µ –≤–∏–¥–∏–º–∏–º

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–∫—Å—Ç
    await expect(profileNameLocator).toHaveText('Nataliia Doe', { timeout: 400000 });

    console.log(`‚úÖ [SUCCESS] –û–Ω–æ–≤–∏–ª–æ—Å—è!`);
});
